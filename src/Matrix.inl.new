template<typename T, int order>
Matrix<T, order>::Matrix(std::vector<int> dim_size) {
  this->dim_size = dim_size;
  reverse(dim_size.begin(), dim_size.end());
  M = init_matrix<order>(dim_size);
};

template<typename T, int order>
std::ostream& operator<<(std::ostream& os, const Matrix<T, order>& m) {
  os << "Matrix (" << typeid(T).name() << ") [";
  for(int dim : m.dim_size) {
    os << dim << ", ";
  }
  os << "]" << std::endl;
  m.printMatrix(os);
  return os;
}

template<typename T, int order>
std::ostream& Matrix<T, order>::printMatrix(std::ostream& os) const {
  return os;
}

template<>
std::ostream& Matrix<double,1>::printMatrix(std::ostream& os) const {
  os << " [ ";
  for(int i=0; i<dim_size[0]; i++) {
    os << M[i] << " ";
    if(i!=dim_size[0]-1)
      os << std::endl << "   ";
  }
  os << "]" << std::endl;
  return os;
}

template<>
std::ostream& Matrix<double,2>::printMatrix(std::ostream& os) const {
  os << " [ ";
  for(int i=0; i<dim_size[0]; i++) {
    for(int j=0; j<dim_size[1]; j++) {
      os << M[i][j] << " ";
    }
    if(i!=dim_size[0]-1)
      os << std::endl << "   ";
  }
  os << "]" << std::endl;
  return os;
}

template<typename T, int order>
typename Matrix<T, order>::template Matrix_t<order-1> Matrix<T, order>::operator[](int index) {
  return M[index];
}
